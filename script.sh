#!/bin/bash

help(){
    echo -e "[Usage]:"
    echo -e "\t$ ~/p5.sh DOMAIN"
}

getSubdomains(){
    echo "Gathering subdomains for $1..."

    # Run multiple curl commands in parallel and store output in subdomains.txt
    curl -s "https://otx.alienvault.com/api/v1/indicators/domain/$1/passive_dns" | jq -r ".passive_dns[].hostname" | sort -u > subdomains.txt &
    curl -s "https://jldc.me/anubis/subdomains/$1" | jq -r '.' | cut -d '"' -f2 | cut -d '[' -f1 | cut -d ']' -f1 | grep . | sort -u >> subdomains.txt &
    curl -s "http://web.archive.org/cdx/search/cdx?url=*.$1/*&output=text&fl=original&collapse=urlkey" | sort | sed -e 's_https*://__' -e "s/\/.//" -e 's/:.//' -e 's/^www\.//' | sort -u >> subdomains.txt &
    curl -s "https://certspotter.com/api/v0/certs?domain=$1" | jq '.[].dns_names[]' 2> /dev/null | sed 's/\"//g' | sed 's/\*\.//g' | grep -w $1\$ | sort -u >> subdomains.txt &
    curl -s "https://crt.sh/?q=%.$1&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u >> subdomains.txt &
    curl -s "https://dns.bufferover.run/dns?q=.$1" | jq -r .FDNS_A[] 2>/dev/null | cut -d ',' -f2 | grep -o "\w.*$1" | sort -u >> subdomains.txt &
    curl -s "https://dns.bufferover.run/dns?q=.$1" | jq -r .RDNS[] 2>/dev/null | cut -d ',' -f2 | grep -o "\w.*$1" | sort -u >> subdomains.txt &
    curl -s "https://tls.bufferover.run/dns?q=.$1" | jq -r .Results 2>/dev/null | cut -d ',' -f3 | grep -o "\w.*$1" | sort -u >> subdomains.txt &
    curl -s "https://api.hackertarget.com/hostsearch/?q=$1" | cut -d ',' -f1 | sort -u >> subdomains.txt &
    curl -s "https://rapiddns.io/subdomain/$1?full=1#result" | grep -oaEi "https?://[^\"\\'> ]+" | grep $1 | sed 's/https\?:\/\///' | cut -d "/" -f3 | sort -u >> subdomains.txt &
    curl -s "https://riddler.io/search/exportcsv?q=pld:$1" | grep -o "\w.*$1" | cut -d ',' -f6 | sort -u >> subdomains.txt &
    curl -s "https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=$1" | jq '.subdomains' | cut -d '"' -f2 | cut -d '[' -f1 | cut -d ']' -f1 | grep . | sort -u >> subdomains.txt &
    curl -s "https://api.threatminer.org/v2/domain.php?q=$1&rt=5" | jq -r '.results[]' | sort -u >> subdomains.txt &
    curl -s "https://urlscan.io/api/v1/search/?q=domain:$1" | jq -r '.results[].page.domain' | sort -u >> subdomains.txt &
    curl -s "https://www.virustotal.com/ui/domains/$1/subdomains?limit=40" | grep '"id":' | cut -d '"' -f4 | sort -u >> subdomains.txt &

    # Wait for all background jobs to complete
    wait

    csrftoken=$(curl -ILs https://dnsdumpster.com | grep csrftoken | cut -d " " -f2 | cut -d "=" -f2 | tr -d ";")
    curl -s --header "Host:dnsdumpster.com" --referer https://dnsdumpster.com --user-agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0" --data "csrfmiddlewaretoken=$csrftoken&targetip=$1" --cookie "csrftoken=$csrftoken" https://dnsdumpster.com > dnsdumpster.html

    if [[ -e dnsdumpster.html && -s dnsdumpster.html ]]; then
        grep -o "\w.*$1" dnsdumpster.html | cut -d "/" -f7 | grep '.' | sort -u >> subdomains.txt
    fi

    cat subdomains.txt | grep -iv "*" | sort -u | grep $1 > subdomains_final.txt
    echo "Subdomain enumeration completed. Results saved in subdomains_final.txt"

    # Cleanup
    rm -rf dnsdumpster.html
    rm -rf subdomains.txt
}

checkSQLi(){
    file=$1
    echo "Checking for SQL Injection Vulnerabilities in subdomains..."

    # Define common SQL Injection patterns
    sqli_patterns=("'" "\"" "--" "#" ";" "/" "/" "xp_")

    # Check each subdomain for SQLi
    while IFS= read -r subdomain; do
        for pattern in "${sqli_patterns[@]}"; do
            if curl -s "http://$subdomain$pattern" | grep -iq "sql"; then
                echo "Possible SQL Injection detected on: $subdomain with pattern: $pattern" >> sql_injections.txt
            fi
        done
    done < "$file"

    echo "SQL Injection check completed. Results saved in sql_injections.txt"
}

if [[ -z $1 ]]; then
    help
else
    echo "Please choose an option:"
    echo "1) Perform Subdomain Enumeration"
    echo "2) Check for SQL Injection Vulnerabilities"
    echo "3) Both (Subdomains and SQL Injection)"
    read -p "Enter your choice [1/2/3]: " choice

    case $choice in
        1)
            getSubdomains $1
            ;;
        2)
            if [[ ! -f "subdomains_final.txt" ]]; then
                echo "No subdomain file found. Perform subdomain enumeration first."
            else
                checkSQLi "subdomains_final.txt"
            fi
            ;;
        3)
            getSubdomains $1
            if [[ -f "subdomains_final.txt" ]]; then
                checkSQLi "subdomains_final.txt"
            fi
            ;;
        *)
            echo "Invalid choice. Exiting."
            ;;
    esac
fi